{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PokerHistoryParser Documentation Welcome to the documentation for PokerHistoryParser. Getting Started To install the package, use the following command: pip install pkrhistoryparser Description description_text","title":"Home"},{"location":"#pokerhistoryparser-documentation","text":"Welcome to the documentation for PokerHistoryParser.","title":"PokerHistoryParser Documentation"},{"location":"#getting-started","text":"To install the package, use the following command: pip install pkrhistoryparser","title":"Getting Started"},{"location":"#description","text":"description_text","title":"Description"},{"location":"parser/","text":"parser Overview This module is part of the pkrhistoryparser package. API Documentation This module contains the HandHistoryParser class which is used to parse poker hand histories. This doc is destined for developers who will work on the pkrhistoryparser module. HandHistoryParser A class to parse poker hand histories. Methods get_raw_text(history_path) Get the raw text from a history file. to_float(txt_num) Transform a string number into a float. extract_game_type(hand_txt) Extract the type of the game from the hand text. parse_to_json(history_path, destination_path) Parse a poker hand history to a JSON format. Examples Parse a poker hand history to a dict to be used in a program: parser = HandHistoryParser() hand_text = parser.get_raw_text(\"path/to/hand/history.txt\") hand_info = parser.parse_hand(hand_text) Parse a poker hand history to a JSON file: history_parser = HandHistoryParser() history_parser.parse_to_json('path/to/hand/history.txt', 'path/to/save/json/file.json') Source code in pkrhistoryparser/parser.pyclass HandHistoryParser : \"\"\" A class to parse poker hand histories. Methods ------- get_raw_text(history_path) Get the raw text from a history file. to_float(txt_num) Transform a string number into a float. extract_game_type(hand_txt) Extract the type of the game from the hand text. parse_to_json(history_path, destination_path) Parse a poker hand history to a JSON format. Examples -------- 1. Parse a poker hand history to a dict to be used in a program: >>> parser = HandHistoryParser() >>> hand_text = parser.get_raw_text(\"path/to/hand/history.txt\") >>> hand_info = parser.parse_hand(hand_text) 2. Parse a poker hand history to a JSON file: >>> history_parser = HandHistoryParser() >>> history_parser.parse_to_json('path/to/hand/history.txt', 'path/to/save/json/file.json') \"\"\" @staticmethod def get_raw_text ( history_path ) -> str : \"\"\" Get the raw text from a history file Parameters: history_path (str): The path to the history file. Returns: str: The text of the hand history file. \"\"\" with open ( history_path , \"r\" , encoding = \"utf-8\" ) as file : hand_text = file . read () return hand_text @staticmethod def to_float ( txt_num : str ) -> float : \"\"\" Transforms any written str number into a float Parameters: txt_num(str): The number to transform Returns: float: The float number \"\"\" try : return float ( txt_num . replace ( \",\" , \".\" )) except ( TypeError , AttributeError , ValueError ): return 0.0 @staticmethod def extract_game_type ( hand_txt : str ) -> dict : \"\"\" Extract the type of the game (Tournament or CashGame). Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the game type extracted from the poker hand history(game_type). \"\"\" game_types = { \"Tournament\" : \"Tournament\" , \"CashGame\" : \"CashGame\" } game_type = next (( game_types [ key ] for key in game_types if key in hand_txt ), \"Unknown\" ) return { \"game_type\" : game_type } def extract_players ( self , hand_txt : str ) -> dict : \"\"\" Extract player information from a raw poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: dict: A dictionary containing player information(seat, pseudo, stack, bounty). \"\"\" matches = re . findall ( pattern = patterns . PLAYER_PATTERN , string = hand_txt ) players_info = { int ( seat ): { \"seat\" : int ( seat ), \"pseudo\" : pseudo , \"stack\" : self . to_float ( stack ), \"bounty\" : self . to_float ( bounty ) if bounty else None } for seat , pseudo , stack , bounty in matches } return players_info def extract_posting ( self , hand_txt : str ) -> list : \"\"\" Extract blinds and antes posted information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: list: A list of dictionaries containing blinds and antes information(pseudo, amount, blind_type). \"\"\" matches = re . findall ( pattern = patterns . BLINDS_PATTERN , string = hand_txt ) blinds_antes_info = [{ \"pseudo\" : pseudo . strip (), \"amount\" : self . to_float ( amount ), \"blind_type\" : blind_type } for pseudo , blind_type , amount in matches ] return blinds_antes_info def extract_buy_in ( self , hand_txt : str ) -> dict : \"\"\" Extract the buy-in and rake information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the buy-in and rake extracted from the poker hand history(prize_pool_contribution, bounty, rake). \"\"\" ko_buy_in_match = re . search ( pattern = patterns . KO_BUY_IN_PATTERN , string = hand_txt ) buy_in_match = re . search ( pattern = patterns . NORMAL_BUY_IN_PATTERN , string = hand_txt ) free_roll_match = re . search ( pattern = patterns . FREE_ROLL_PATTERN , string = hand_txt ) if ko_buy_in_match : prize_pool_contribution , bounty , rake = ( ko_buy_in_match . group ( 1 ), ko_buy_in_match . group ( 2 ), ko_buy_in_match . group ( 3 )) elif buy_in_match : prize_pool_contribution , rake = buy_in_match . group ( 1 ), buy_in_match . group ( 2 ) bounty = 0 elif free_roll_match : prize_pool_contribution , bounty , rake = 0 , 0 , 0 else : prize_pool_contribution , bounty , rake = None , None , None return { \"prize_pool_contribution\" : self . to_float ( prize_pool_contribution ), \"bounty\" : self . to_float ( bounty ), \"rake\" : self . to_float ( rake )} @staticmethod def extract_datetime ( hand_txt : str ) -> dict : \"\"\" Extract the datetime information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the datetime extracted from the poker hand history(datetime). \"\"\" datetime_match = re . search ( pattern = patterns . DATETIME_PATTERN , string = hand_txt ) dt = datetime . strptime ( datetime_match . group ( 1 ), \"%Y/%m/ %d %H:%M:%S\" ) dt_str = dt . strftime ( \" %d -%m-%Y %H:%M:%S\" ) return { \"datetime\" : dt_str } def extract_blinds ( self , hand_txt : str ) -> dict : \"\"\" Extract the blind levels and ante. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the blind levels and ante extracted from the poker hand history(ante, sb, bb). \"\"\" tour_blinds_match = re . search ( pattern = patterns . TOURNAMENT_BLINDS_PATTERN , string = hand_txt ) other_blinds_match = re . search ( pattern = patterns . OTHER_BLINDS_PATTERN , string = hand_txt ) if tour_blinds_match : ante , sb , bb = tour_blinds_match . group ( 1 ), tour_blinds_match . group ( 2 ), tour_blinds_match . group ( 3 ) elif other_blinds_match : sb , bb = ( other_blinds_match . group ( 1 ) . replace ( \"\u20ac\" , \"\" ), other_blinds_match . group ( 2 ) . replace ( \"\u20ac\" , \"\" )) ante = 0 else : ante , sb , bb = None , None , None return { \"ante\" : self . to_float ( ante ), \"sb\" : self . to_float ( sb ), \"bb\" : self . to_float ( bb )} @staticmethod def extract_level ( hand_txt : str ) -> dict : \"\"\" Extract the level information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the level extracted from the poker hand history(level). \"\"\" level_match = re . search ( pattern = patterns . LEVEL_PATTERN , string = hand_txt ) return { \"level\" : int ( level_match . group ( 1 )) if level_match else 0 } @staticmethod def extract_max_players ( hand_txt : str ) -> dict : \"\"\" Extract the max players at the table. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the max players extracted from the poker hand history(max_players). \"\"\" max_players = re . search ( pattern = patterns . MAX_PLAYERS_PATTERN , string = hand_txt ) . group ( 1 ) return { \"max_players\" : int ( max_players )} @staticmethod def extract_button_seat ( hand_txt : str ) -> dict : \"\"\" Extract the button seat information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the button seat extracted from the poker hand history(button). \"\"\" button = re . search ( pattern = patterns . BUTTON_SEAT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"button\" : int ( button )} @staticmethod def extract_table_name ( hand_txt : str ) -> dict : \"\"\" Extract the table name information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table name extracted from the poker hand history(table_name). \"\"\" table_name = re . search ( pattern = patterns . TABLE_NAME_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_name\" : table_name } @staticmethod def extract_table_ident ( hand_txt : str ) -> dict : \"\"\" Extract the table ident information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table ident extracted from the poker hand history(table_ident). \"\"\" table_ident = re . search ( pattern = patterns . TABLE_IDENT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_ident\" : table_ident } @staticmethod def extract_hero_hand ( hand_txt : str ) -> dict : \"\"\" Extract the hero's hand (hole cards) from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hero's hand extracted from the poker hand history(hero, first_card, second_card). \"\"\" hero , card1 , card2 = re . search ( pattern = patterns . HERO_HAND_PATTERN , string = hand_txt , flags = re . UNICODE ) . groups () return { \"hero\" : hero , \"first_card\" : card1 , \"second_card\" : card2 } @staticmethod def extract_flop ( hand_txt : str ) -> dict : \"\"\" Extract the cards on the Flop from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the cards on the Flop(flop_card_1, flop_card_2, flop_card_3). \"\"\" flop_match = re . search ( pattern = patterns . FLOP_PATTERN , string = hand_txt , flags = re . UNICODE ) card1 , card2 , card3 = flop_match . groups () if flop_match else ( None , None , None ) return { \"flop_card_1\" : card1 , \"flop_card_2\" : card2 , \"flop_card_3\" : card3 } @staticmethod def extract_turn ( hand_txt : str ) -> dict : \"\"\" Extract the card on the Turn from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the Turn(turn_card). \"\"\" turn_match = re . search ( pattern = patterns . TURN_PATTERN , string = hand_txt , flags = re . UNICODE ) card = turn_match . group ( 1 ) if turn_match else None return { \"turn_card\" : card } @staticmethod def extract_river ( hand_txt : str ) -> dict : \"\"\" Extract the card on the River from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the River(river_card). \"\"\" river_match = re . search ( pattern = patterns . RIVER_PATTERN , string = hand_txt , flags = re . UNICODE ) card = river_match . group ( 1 ) if river_match else None return { \"river_card\" : card } def parse_actions ( self , actions_txt : str ) -> list : \"\"\" Parse the actions text from a poker hand history for a specific street and return a list of dictionaries containing the actions. Parameters: actions_txt (str): The raw actions text for a specific street. Returns: list: A list of dictionaries(player, action, amount), each representing an action. \"\"\" actions = re . findall ( pattern = patterns . ACTION_PATTERN , string = actions_txt ) parsed_actions = [{ 'player' : player . strip (), 'action' : action_type , 'amount' : self . to_float ( amount )} for player , action_type , amount in actions ] return parsed_actions def extract_actions ( self , hand_txt : str ) -> dict : \"\"\" Extract the actions information from a poker hand history and return as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the actions extracted for each street of the poker hand history(preflop, flop, turn, river). \"\"\" actions_dict = { street : self . parse_actions ( re . search ( pattern , string = hand_txt , flags = re . DOTALL ) . group ( 1 )) if re . search ( pattern , string = hand_txt , flags = re . DOTALL ) else [] for pattern , street in zip ( patterns . STREET_ACTION_PATTERNS , [ 'preflop' , 'flop' , 'turn' , 'river' ])} return actions_dict @staticmethod def extract_showdown ( hand_txt : str ) -> dict : \"\"\" Extract the showdown information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the showdown information extracted from the poker hand history(first_card, second_card). \"\"\" showdown_info = { player . strip (): { \"first_card\" : card1 , \"second_card\" : card2 } for player , card1 , card2 in re . findall ( pattern = patterns . SHOWDOWN_PATTERN , string = hand_txt )} return showdown_info def extract_winners ( self , hand_txt : str ) -> dict : \"\"\" Extract the winners information from a poker hand history and return it as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the winners information extracted from the poker hand history(winner_name(amount, pot_type)). \"\"\" winners_info = { winner : { \"amount\" : self . to_float ( amount ), \"pot_type\" : pot_type } for winner , amount , pot_type in re . findall ( pattern = patterns . WINNERS_PATTERN , string = hand_txt )} return winners_info @staticmethod def extract_hand_id ( hand_txt : str ) -> dict : \"\"\" Extract the hand id information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hand id extracted from the poker hand history(hand_id). \"\"\" hand_id = re . search ( pattern = patterns . HAND_ID_PATTERN , string = hand_txt ) . group ( 1 ) return { \"hand_id\" : hand_id } def parse_hand ( self , hand_txt : str ) -> dict : \"\"\" Extract all information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the information extracted from the poker hand history (hand_id, datetime, game_type, buy_in, blinds, level, max_players, button_seat, table_name, table_ident, players, hero_hand, postings, actions, flop, turn, river, showdown, winners). \"\"\" hand_history_dict = { \"hand_id\" : self . extract_hand_id ( hand_txt )[ \"hand_id\" ], \"datetime\" : self . extract_datetime ( hand_txt )[ \"datetime\" ], \"game_type\" : self . extract_game_type ( hand_txt )[ \"game_type\" ], \"buy_in\" : self . extract_buy_in ( hand_txt ), \"blinds\" : self . extract_blinds ( hand_txt ), \"level\" : self . extract_level ( hand_txt )[ \"level\" ], \"max_players\" : self . extract_max_players ( hand_txt )[ \"max_players\" ], \"button_seat\" : self . extract_button_seat ( hand_txt )[ \"button\" ], \"table_name\" : self . extract_table_name ( hand_txt )[ \"table_name\" ], \"table_ident\" : self . extract_table_ident ( hand_txt )[ \"table_ident\" ], \"players\" : self . extract_players ( hand_txt ), \"hero_hand\" : self . extract_hero_hand ( hand_txt ), \"postings\" : self . extract_posting ( hand_txt ), \"actions\" : self . extract_actions ( hand_txt ), \"flop\" : self . extract_flop ( hand_txt ), \"turn\" : self . extract_turn ( hand_txt ), \"river\" : self . extract_river ( hand_txt ), \"showdown\" : self . extract_showdown ( hand_txt ), \"winners\" : self . extract_winners ( hand_txt ) } return hand_history_dict def parse_to_json ( self , history_path : str , destination_path : str ) -> None : \"\"\" Parse a poker hand history to a JSON format. Parameters: history_path (str): The path to the poker hand history file. destination_path (str): The path to save the JSON file. \"\"\" hand_text = self . get_raw_text ( history_path ) hand_info = self . parse_hand ( hand_text ) with open ( destination_path , \"w\" , encoding = \"utf-8\" ) as file : json . dump ( hand_info , file , indent = 4 ) extract_actions ( hand_txt ) Extract the actions information from a poker hand history and return as a nested dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing all the actions extracted for each street dict \u2013 of the poker hand history(preflop, flop, turn, river). Source code in pkrhistoryparser/parser.py 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 def extract_actions ( self , hand_txt : str ) -> dict : \"\"\" Extract the actions information from a poker hand history and return as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the actions extracted for each street of the poker hand history(preflop, flop, turn, river). \"\"\" actions_dict = { street : self . parse_actions ( re . search ( pattern , string = hand_txt , flags = re . DOTALL ) . group ( 1 )) if re . search ( pattern , string = hand_txt , flags = re . DOTALL ) else [] for pattern , street in zip ( patterns . STREET_ACTION_PATTERNS , [ 'preflop' , 'flop' , 'turn' , 'river' ])} return actions_dict extract_blinds ( hand_txt ) Extract the blind levels and ante. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the blind levels and ante extracted from the poker hand history(ante, sb, bb). Source code in pkrhistoryparser/parser.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def extract_blinds ( self , hand_txt : str ) -> dict : \"\"\" Extract the blind levels and ante. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the blind levels and ante extracted from the poker hand history(ante, sb, bb). \"\"\" tour_blinds_match = re . search ( pattern = patterns . TOURNAMENT_BLINDS_PATTERN , string = hand_txt ) other_blinds_match = re . search ( pattern = patterns . OTHER_BLINDS_PATTERN , string = hand_txt ) if tour_blinds_match : ante , sb , bb = tour_blinds_match . group ( 1 ), tour_blinds_match . group ( 2 ), tour_blinds_match . group ( 3 ) elif other_blinds_match : sb , bb = ( other_blinds_match . group ( 1 ) . replace ( \"\u20ac\" , \"\" ), other_blinds_match . group ( 2 ) . replace ( \"\u20ac\" , \"\" )) ante = 0 else : ante , sb , bb = None , None , None return { \"ante\" : self . to_float ( ante ), \"sb\" : self . to_float ( sb ), \"bb\" : self . to_float ( bb )} extract_button_seat ( hand_txt ) staticmethod Extract the button seat information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the button seat extracted from the poker hand history(button). Source code in pkrhistoryparser/parser.py 217 218 219 220 221 222 223 224 225 226 227 228 229 @staticmethod def extract_button_seat ( hand_txt : str ) -> dict : \"\"\" Extract the button seat information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the button seat extracted from the poker hand history(button). \"\"\" button = re . search ( pattern = patterns . BUTTON_SEAT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"button\" : int ( button )} extract_buy_in ( hand_txt ) Extract the buy-in and rake information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dict containing the buy-in and rake extracted dict \u2013 from the poker hand history(prize_pool_contribution, bounty, rake). Source code in pkrhistoryparser/parser.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 def extract_buy_in ( self , hand_txt : str ) -> dict : \"\"\" Extract the buy-in and rake information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the buy-in and rake extracted from the poker hand history(prize_pool_contribution, bounty, rake). \"\"\" ko_buy_in_match = re . search ( pattern = patterns . KO_BUY_IN_PATTERN , string = hand_txt ) buy_in_match = re . search ( pattern = patterns . NORMAL_BUY_IN_PATTERN , string = hand_txt ) free_roll_match = re . search ( pattern = patterns . FREE_ROLL_PATTERN , string = hand_txt ) if ko_buy_in_match : prize_pool_contribution , bounty , rake = ( ko_buy_in_match . group ( 1 ), ko_buy_in_match . group ( 2 ), ko_buy_in_match . group ( 3 )) elif buy_in_match : prize_pool_contribution , rake = buy_in_match . group ( 1 ), buy_in_match . group ( 2 ) bounty = 0 elif free_roll_match : prize_pool_contribution , bounty , rake = 0 , 0 , 0 else : prize_pool_contribution , bounty , rake = None , None , None return { \"prize_pool_contribution\" : self . to_float ( prize_pool_contribution ), \"bounty\" : self . to_float ( bounty ), \"rake\" : self . to_float ( rake )} extract_datetime ( hand_txt ) staticmethod Extract the datetime information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the datetime extracted from the poker hand history(datetime). Source code in pkrhistoryparser/parser.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @staticmethod def extract_datetime ( hand_txt : str ) -> dict : \"\"\" Extract the datetime information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the datetime extracted from the poker hand history(datetime). \"\"\" datetime_match = re . search ( pattern = patterns . DATETIME_PATTERN , string = hand_txt ) dt = datetime . strptime ( datetime_match . group ( 1 ), \"%Y/%m/ %d %H:%M:%S\" ) dt_str = dt . strftime ( \" %d -%m-%Y %H:%M:%S\" ) return { \"datetime\" : dt_str } extract_flop ( hand_txt ) staticmethod Extract the cards on the Flop from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary representing the cards on the Flop(flop_card_1, flop_card_2, flop_card_3). Source code in pkrhistoryparser/parser.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 @staticmethod def extract_flop ( hand_txt : str ) -> dict : \"\"\" Extract the cards on the Flop from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the cards on the Flop(flop_card_1, flop_card_2, flop_card_3). \"\"\" flop_match = re . search ( pattern = patterns . FLOP_PATTERN , string = hand_txt , flags = re . UNICODE ) card1 , card2 , card3 = flop_match . groups () if flop_match else ( None , None , None ) return { \"flop_card_1\" : card1 , \"flop_card_2\" : card2 , \"flop_card_3\" : card3 } extract_game_type ( hand_txt ) staticmethod Extract the type of the game (Tournament or CashGame). Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the game type extracted from the poker hand history(game_type). Source code in pkrhistoryparser/parser.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @staticmethod def extract_game_type ( hand_txt : str ) -> dict : \"\"\" Extract the type of the game (Tournament or CashGame). Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the game type extracted from the poker hand history(game_type). \"\"\" game_types = { \"Tournament\" : \"Tournament\" , \"CashGame\" : \"CashGame\" } game_type = next (( game_types [ key ] for key in game_types if key in hand_txt ), \"Unknown\" ) return { \"game_type\" : game_type } extract_hand_id ( hand_txt ) staticmethod Extract the hand id information from a poker hand history. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the hand id extracted from the poker hand history(hand_id). Source code in pkrhistoryparser/parser.py 382 383 384 385 386 387 388 389 390 391 392 393 394 @staticmethod def extract_hand_id ( hand_txt : str ) -> dict : \"\"\" Extract the hand id information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hand id extracted from the poker hand history(hand_id). \"\"\" hand_id = re . search ( pattern = patterns . HAND_ID_PATTERN , string = hand_txt ) . group ( 1 ) return { \"hand_id\" : hand_id } extract_hero_hand ( hand_txt ) staticmethod Extract the hero's hand (hole cards) from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the hero's hand extracted from the poker hand history(hero, first_card, second_card). Source code in pkrhistoryparser/parser.py 259 260 261 262 263 264 265 266 267 268 269 270 271 @staticmethod def extract_hero_hand ( hand_txt : str ) -> dict : \"\"\" Extract the hero's hand (hole cards) from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hero's hand extracted from the poker hand history(hero, first_card, second_card). \"\"\" hero , card1 , card2 = re . search ( pattern = patterns . HERO_HAND_PATTERN , string = hand_txt , flags = re . UNICODE ) . groups () return { \"hero\" : hero , \"first_card\" : card1 , \"second_card\" : card2 } extract_level ( hand_txt ) staticmethod Extract the level information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the level extracted from the poker hand history(level). Source code in pkrhistoryparser/parser.py 189 190 191 192 193 194 195 196 197 198 199 200 201 @staticmethod def extract_level ( hand_txt : str ) -> dict : \"\"\" Extract the level information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the level extracted from the poker hand history(level). \"\"\" level_match = re . search ( pattern = patterns . LEVEL_PATTERN , string = hand_txt ) return { \"level\" : int ( level_match . group ( 1 )) if level_match else 0 } extract_max_players ( hand_txt ) staticmethod Extract the max players at the table. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the max players extracted from the poker hand history(max_players). Source code in pkrhistoryparser/parser.py 203 204 205 206 207 208 209 210 211 212 213 214 215 @staticmethod def extract_max_players ( hand_txt : str ) -> dict : \"\"\" Extract the max players at the table. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the max players extracted from the poker hand history(max_players). \"\"\" max_players = re . search ( pattern = patterns . MAX_PLAYERS_PATTERN , string = hand_txt ) . group ( 1 ) return { \"max_players\" : int ( max_players )} extract_players ( hand_txt ) Extract player information from a raw poker hand history and return as a dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand history as a string. Returns: dict ( dict ) \u2013 A dictionary containing player information(seat, pseudo, stack, bounty). Source code in pkrhistoryparser/parser.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def extract_players ( self , hand_txt : str ) -> dict : \"\"\" Extract player information from a raw poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: dict: A dictionary containing player information(seat, pseudo, stack, bounty). \"\"\" matches = re . findall ( pattern = patterns . PLAYER_PATTERN , string = hand_txt ) players_info = { int ( seat ): { \"seat\" : int ( seat ), \"pseudo\" : pseudo , \"stack\" : self . to_float ( stack ), \"bounty\" : self . to_float ( bounty ) if bounty else None } for seat , pseudo , stack , bounty in matches } return players_info extract_posting ( hand_txt ) Extract blinds and antes posted information from a poker hand history and return as a dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand history as a string. Returns: list ( list ) \u2013 A list of dictionaries containing blinds and antes information(pseudo, amount, blind_type). Source code in pkrhistoryparser/parser.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def extract_posting ( self , hand_txt : str ) -> list : \"\"\" Extract blinds and antes posted information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: list: A list of dictionaries containing blinds and antes information(pseudo, amount, blind_type). \"\"\" matches = re . findall ( pattern = patterns . BLINDS_PATTERN , string = hand_txt ) blinds_antes_info = [{ \"pseudo\" : pseudo . strip (), \"amount\" : self . to_float ( amount ), \"blind_type\" : blind_type } for pseudo , blind_type , amount in matches ] return blinds_antes_info extract_river ( hand_txt ) staticmethod Extract the card on the River from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary representing the card on the River(river_card). Source code in pkrhistoryparser/parser.py 303 304 305 306 307 308 309 310 311 312 313 314 315 316 @staticmethod def extract_river ( hand_txt : str ) -> dict : \"\"\" Extract the card on the River from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the River(river_card). \"\"\" river_match = re . search ( pattern = patterns . RIVER_PATTERN , string = hand_txt , flags = re . UNICODE ) card = river_match . group ( 1 ) if river_match else None return { \"river_card\" : card } extract_showdown ( hand_txt ) staticmethod Extract the showdown information from a poker hand history. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dict containing the showdown information extracted dict \u2013 from the poker hand history(first_card, second_card). Source code in pkrhistoryparser/parser.py 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 @staticmethod def extract_showdown ( hand_txt : str ) -> dict : \"\"\" Extract the showdown information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the showdown information extracted from the poker hand history(first_card, second_card). \"\"\" showdown_info = { player . strip (): { \"first_card\" : card1 , \"second_card\" : card2 } for player , card1 , card2 in re . findall ( pattern = patterns . SHOWDOWN_PATTERN , string = hand_txt )} return showdown_info extract_table_ident ( hand_txt ) staticmethod Extract the table ident information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the table ident extracted from the poker hand history(table_ident). Source code in pkrhistoryparser/parser.py 245 246 247 248 249 250 251 252 253 254 255 256 257 @staticmethod def extract_table_ident ( hand_txt : str ) -> dict : \"\"\" Extract the table ident information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table ident extracted from the poker hand history(table_ident). \"\"\" table_ident = re . search ( pattern = patterns . TABLE_IDENT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_ident\" : table_ident } extract_table_name ( hand_txt ) staticmethod Extract the table name information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the table name extracted from the poker hand history(table_name). Source code in pkrhistoryparser/parser.py 231 232 233 234 235 236 237 238 239 240 241 242 243 @staticmethod def extract_table_name ( hand_txt : str ) -> dict : \"\"\" Extract the table name information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table name extracted from the poker hand history(table_name). \"\"\" table_name = re . search ( pattern = patterns . TABLE_NAME_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_name\" : table_name } extract_turn ( hand_txt ) staticmethod Extract the card on the Turn from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary representing the card on the Turn(turn_card). Source code in pkrhistoryparser/parser.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 @staticmethod def extract_turn ( hand_txt : str ) -> dict : \"\"\" Extract the card on the Turn from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the Turn(turn_card). \"\"\" turn_match = re . search ( pattern = patterns . TURN_PATTERN , string = hand_txt , flags = re . UNICODE ) card = turn_match . group ( 1 ) if turn_match else None return { \"turn_card\" : card } extract_winners ( hand_txt ) Extract the winners information from a poker hand history and return it as a nested dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the winners information extracted dict \u2013 from the poker hand history(winner_name(amount, pot_type)). Source code in pkrhistoryparser/parser.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 def extract_winners ( self , hand_txt : str ) -> dict : \"\"\" Extract the winners information from a poker hand history and return it as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the winners information extracted from the poker hand history(winner_name(amount, pot_type)). \"\"\" winners_info = { winner : { \"amount\" : self . to_float ( amount ), \"pot_type\" : pot_type } for winner , amount , pot_type in re . findall ( pattern = patterns . WINNERS_PATTERN , string = hand_txt )} return winners_info get_raw_text ( history_path ) staticmethod Get the raw text from a history file Parameters: history_path ( str ) \u2013 The path to the history file. Returns: str ( str ) \u2013 The text of the hand history file. Source code in pkrhistoryparser/parser.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 @staticmethod def get_raw_text ( history_path ) -> str : \"\"\" Get the raw text from a history file Parameters: history_path (str): The path to the history file. Returns: str: The text of the hand history file. \"\"\" with open ( history_path , \"r\" , encoding = \"utf-8\" ) as file : hand_text = file . read () return hand_text parse_actions ( actions_txt ) Parse the actions text from a poker hand history for a specific street and return a list of dictionaries containing the actions. Parameters: actions_txt ( str ) \u2013 The raw actions text for a specific street. Returns: list ( list ) \u2013 A list of dictionaries(player, action, amount), each representing an action. Source code in pkrhistoryparser/parser.py 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 def parse_actions ( self , actions_txt : str ) -> list : \"\"\" Parse the actions text from a poker hand history for a specific street and return a list of dictionaries containing the actions. Parameters: actions_txt (str): The raw actions text for a specific street. Returns: list: A list of dictionaries(player, action, amount), each representing an action. \"\"\" actions = re . findall ( pattern = patterns . ACTION_PATTERN , string = actions_txt ) parsed_actions = [{ 'player' : player . strip (), 'action' : action_type , 'amount' : self . to_float ( amount )} for player , action_type , amount in actions ] return parsed_actions parse_hand ( hand_txt ) Extract all information from a poker hand history and return as a dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing all the information extracted from the poker hand history (hand_id, datetime, game_type, buy_in, blinds, level, max_players, button_seat, table_name, table_ident, players, hero_hand, postings, actions, flop, turn, river, showdown, winners). Source code in pkrhistoryparser/parser.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def parse_hand ( self , hand_txt : str ) -> dict : \"\"\" Extract all information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the information extracted from the poker hand history (hand_id, datetime, game_type, buy_in, blinds, level, max_players, button_seat, table_name, table_ident, players, hero_hand, postings, actions, flop, turn, river, showdown, winners). \"\"\" hand_history_dict = { \"hand_id\" : self . extract_hand_id ( hand_txt )[ \"hand_id\" ], \"datetime\" : self . extract_datetime ( hand_txt )[ \"datetime\" ], \"game_type\" : self . extract_game_type ( hand_txt )[ \"game_type\" ], \"buy_in\" : self . extract_buy_in ( hand_txt ), \"blinds\" : self . extract_blinds ( hand_txt ), \"level\" : self . extract_level ( hand_txt )[ \"level\" ], \"max_players\" : self . extract_max_players ( hand_txt )[ \"max_players\" ], \"button_seat\" : self . extract_button_seat ( hand_txt )[ \"button\" ], \"table_name\" : self . extract_table_name ( hand_txt )[ \"table_name\" ], \"table_ident\" : self . extract_table_ident ( hand_txt )[ \"table_ident\" ], \"players\" : self . extract_players ( hand_txt ), \"hero_hand\" : self . extract_hero_hand ( hand_txt ), \"postings\" : self . extract_posting ( hand_txt ), \"actions\" : self . extract_actions ( hand_txt ), \"flop\" : self . extract_flop ( hand_txt ), \"turn\" : self . extract_turn ( hand_txt ), \"river\" : self . extract_river ( hand_txt ), \"showdown\" : self . extract_showdown ( hand_txt ), \"winners\" : self . extract_winners ( hand_txt ) } return hand_history_dict parse_to_json ( history_path , destination_path ) Parse a poker hand history to a JSON format. Parameters: history_path ( str ) \u2013 The path to the poker hand history file. destination_path ( str ) \u2013 The path to save the JSON file. Source code in pkrhistoryparser/parser.py 431 432 433 434 435 436 437 438 439 440 441 442 def parse_to_json ( self , history_path : str , destination_path : str ) -> None : \"\"\" Parse a poker hand history to a JSON format. Parameters: history_path (str): The path to the poker hand history file. destination_path (str): The path to save the JSON file. \"\"\" hand_text = self . get_raw_text ( history_path ) hand_info = self . parse_hand ( hand_text ) with open ( destination_path , \"w\" , encoding = \"utf-8\" ) as file : json . dump ( hand_info , file , indent = 4 ) to_float ( txt_num ) staticmethod Transforms any written str number into a float Parameters: txt_num(str) \u2013 The number to transform Returns: float ( float ) \u2013 The float number Source code in pkrhistoryparser/parser.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 @staticmethod def to_float ( txt_num : str ) -> float : \"\"\" Transforms any written str number into a float Parameters: txt_num(str): The number to transform Returns: float: The float number \"\"\" try : return float ( txt_num . replace ( \",\" , \".\" )) except ( TypeError , AttributeError , ValueError ): return 0.0","title":"Parser"},{"location":"parser/#parser","text":"","title":"parser"},{"location":"parser/#overview","text":"This module is part of the pkrhistoryparser package.","title":"Overview"},{"location":"parser/#api-documentation","text":"This module contains the HandHistoryParser class which is used to parse poker hand histories. This doc is destined for developers who will work on the pkrhistoryparser module.","title":"API Documentation"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser","text":"A class to parse poker hand histories.","title":"HandHistoryParser"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser--methods","text":"get_raw_text(history_path) Get the raw text from a history file. to_float(txt_num) Transform a string number into a float. extract_game_type(hand_txt) Extract the type of the game from the hand text. parse_to_json(history_path, destination_path) Parse a poker hand history to a JSON format.","title":"Methods"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser--examples","text":"Parse a poker hand history to a dict to be used in a program: parser = HandHistoryParser() hand_text = parser.get_raw_text(\"path/to/hand/history.txt\") hand_info = parser.parse_hand(hand_text) Parse a poker hand history to a JSON file: history_parser = HandHistoryParser() history_parser.parse_to_json('path/to/hand/history.txt', 'path/to/save/json/file.json') Source code in pkrhistoryparser/parser.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 class HandHistoryParser : \"\"\" A class to parse poker hand histories. Methods ------- get_raw_text(history_path) Get the raw text from a history file. to_float(txt_num) Transform a string number into a float. extract_game_type(hand_txt) Extract the type of the game from the hand text. parse_to_json(history_path, destination_path) Parse a poker hand history to a JSON format. Examples -------- 1. Parse a poker hand history to a dict to be used in a program: >>> parser = HandHistoryParser() >>> hand_text = parser.get_raw_text(\"path/to/hand/history.txt\") >>> hand_info = parser.parse_hand(hand_text) 2. Parse a poker hand history to a JSON file: >>> history_parser = HandHistoryParser() >>> history_parser.parse_to_json('path/to/hand/history.txt', 'path/to/save/json/file.json') \"\"\" @staticmethod def get_raw_text ( history_path ) -> str : \"\"\" Get the raw text from a history file Parameters: history_path (str): The path to the history file. Returns: str: The text of the hand history file. \"\"\" with open ( history_path , \"r\" , encoding = \"utf-8\" ) as file : hand_text = file . read () return hand_text @staticmethod def to_float ( txt_num : str ) -> float : \"\"\" Transforms any written str number into a float Parameters: txt_num(str): The number to transform Returns: float: The float number \"\"\" try : return float ( txt_num . replace ( \",\" , \".\" )) except ( TypeError , AttributeError , ValueError ): return 0.0 @staticmethod def extract_game_type ( hand_txt : str ) -> dict : \"\"\" Extract the type of the game (Tournament or CashGame). Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the game type extracted from the poker hand history(game_type). \"\"\" game_types = { \"Tournament\" : \"Tournament\" , \"CashGame\" : \"CashGame\" } game_type = next (( game_types [ key ] for key in game_types if key in hand_txt ), \"Unknown\" ) return { \"game_type\" : game_type } def extract_players ( self , hand_txt : str ) -> dict : \"\"\" Extract player information from a raw poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: dict: A dictionary containing player information(seat, pseudo, stack, bounty). \"\"\" matches = re . findall ( pattern = patterns . PLAYER_PATTERN , string = hand_txt ) players_info = { int ( seat ): { \"seat\" : int ( seat ), \"pseudo\" : pseudo , \"stack\" : self . to_float ( stack ), \"bounty\" : self . to_float ( bounty ) if bounty else None } for seat , pseudo , stack , bounty in matches } return players_info def extract_posting ( self , hand_txt : str ) -> list : \"\"\" Extract blinds and antes posted information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: list: A list of dictionaries containing blinds and antes information(pseudo, amount, blind_type). \"\"\" matches = re . findall ( pattern = patterns . BLINDS_PATTERN , string = hand_txt ) blinds_antes_info = [{ \"pseudo\" : pseudo . strip (), \"amount\" : self . to_float ( amount ), \"blind_type\" : blind_type } for pseudo , blind_type , amount in matches ] return blinds_antes_info def extract_buy_in ( self , hand_txt : str ) -> dict : \"\"\" Extract the buy-in and rake information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the buy-in and rake extracted from the poker hand history(prize_pool_contribution, bounty, rake). \"\"\" ko_buy_in_match = re . search ( pattern = patterns . KO_BUY_IN_PATTERN , string = hand_txt ) buy_in_match = re . search ( pattern = patterns . NORMAL_BUY_IN_PATTERN , string = hand_txt ) free_roll_match = re . search ( pattern = patterns . FREE_ROLL_PATTERN , string = hand_txt ) if ko_buy_in_match : prize_pool_contribution , bounty , rake = ( ko_buy_in_match . group ( 1 ), ko_buy_in_match . group ( 2 ), ko_buy_in_match . group ( 3 )) elif buy_in_match : prize_pool_contribution , rake = buy_in_match . group ( 1 ), buy_in_match . group ( 2 ) bounty = 0 elif free_roll_match : prize_pool_contribution , bounty , rake = 0 , 0 , 0 else : prize_pool_contribution , bounty , rake = None , None , None return { \"prize_pool_contribution\" : self . to_float ( prize_pool_contribution ), \"bounty\" : self . to_float ( bounty ), \"rake\" : self . to_float ( rake )} @staticmethod def extract_datetime ( hand_txt : str ) -> dict : \"\"\" Extract the datetime information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the datetime extracted from the poker hand history(datetime). \"\"\" datetime_match = re . search ( pattern = patterns . DATETIME_PATTERN , string = hand_txt ) dt = datetime . strptime ( datetime_match . group ( 1 ), \"%Y/%m/ %d %H:%M:%S\" ) dt_str = dt . strftime ( \" %d -%m-%Y %H:%M:%S\" ) return { \"datetime\" : dt_str } def extract_blinds ( self , hand_txt : str ) -> dict : \"\"\" Extract the blind levels and ante. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the blind levels and ante extracted from the poker hand history(ante, sb, bb). \"\"\" tour_blinds_match = re . search ( pattern = patterns . TOURNAMENT_BLINDS_PATTERN , string = hand_txt ) other_blinds_match = re . search ( pattern = patterns . OTHER_BLINDS_PATTERN , string = hand_txt ) if tour_blinds_match : ante , sb , bb = tour_blinds_match . group ( 1 ), tour_blinds_match . group ( 2 ), tour_blinds_match . group ( 3 ) elif other_blinds_match : sb , bb = ( other_blinds_match . group ( 1 ) . replace ( \"\u20ac\" , \"\" ), other_blinds_match . group ( 2 ) . replace ( \"\u20ac\" , \"\" )) ante = 0 else : ante , sb , bb = None , None , None return { \"ante\" : self . to_float ( ante ), \"sb\" : self . to_float ( sb ), \"bb\" : self . to_float ( bb )} @staticmethod def extract_level ( hand_txt : str ) -> dict : \"\"\" Extract the level information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the level extracted from the poker hand history(level). \"\"\" level_match = re . search ( pattern = patterns . LEVEL_PATTERN , string = hand_txt ) return { \"level\" : int ( level_match . group ( 1 )) if level_match else 0 } @staticmethod def extract_max_players ( hand_txt : str ) -> dict : \"\"\" Extract the max players at the table. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the max players extracted from the poker hand history(max_players). \"\"\" max_players = re . search ( pattern = patterns . MAX_PLAYERS_PATTERN , string = hand_txt ) . group ( 1 ) return { \"max_players\" : int ( max_players )} @staticmethod def extract_button_seat ( hand_txt : str ) -> dict : \"\"\" Extract the button seat information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the button seat extracted from the poker hand history(button). \"\"\" button = re . search ( pattern = patterns . BUTTON_SEAT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"button\" : int ( button )} @staticmethod def extract_table_name ( hand_txt : str ) -> dict : \"\"\" Extract the table name information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table name extracted from the poker hand history(table_name). \"\"\" table_name = re . search ( pattern = patterns . TABLE_NAME_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_name\" : table_name } @staticmethod def extract_table_ident ( hand_txt : str ) -> dict : \"\"\" Extract the table ident information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table ident extracted from the poker hand history(table_ident). \"\"\" table_ident = re . search ( pattern = patterns . TABLE_IDENT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_ident\" : table_ident } @staticmethod def extract_hero_hand ( hand_txt : str ) -> dict : \"\"\" Extract the hero's hand (hole cards) from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hero's hand extracted from the poker hand history(hero, first_card, second_card). \"\"\" hero , card1 , card2 = re . search ( pattern = patterns . HERO_HAND_PATTERN , string = hand_txt , flags = re . UNICODE ) . groups () return { \"hero\" : hero , \"first_card\" : card1 , \"second_card\" : card2 } @staticmethod def extract_flop ( hand_txt : str ) -> dict : \"\"\" Extract the cards on the Flop from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the cards on the Flop(flop_card_1, flop_card_2, flop_card_3). \"\"\" flop_match = re . search ( pattern = patterns . FLOP_PATTERN , string = hand_txt , flags = re . UNICODE ) card1 , card2 , card3 = flop_match . groups () if flop_match else ( None , None , None ) return { \"flop_card_1\" : card1 , \"flop_card_2\" : card2 , \"flop_card_3\" : card3 } @staticmethod def extract_turn ( hand_txt : str ) -> dict : \"\"\" Extract the card on the Turn from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the Turn(turn_card). \"\"\" turn_match = re . search ( pattern = patterns . TURN_PATTERN , string = hand_txt , flags = re . UNICODE ) card = turn_match . group ( 1 ) if turn_match else None return { \"turn_card\" : card } @staticmethod def extract_river ( hand_txt : str ) -> dict : \"\"\" Extract the card on the River from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the River(river_card). \"\"\" river_match = re . search ( pattern = patterns . RIVER_PATTERN , string = hand_txt , flags = re . UNICODE ) card = river_match . group ( 1 ) if river_match else None return { \"river_card\" : card } def parse_actions ( self , actions_txt : str ) -> list : \"\"\" Parse the actions text from a poker hand history for a specific street and return a list of dictionaries containing the actions. Parameters: actions_txt (str): The raw actions text for a specific street. Returns: list: A list of dictionaries(player, action, amount), each representing an action. \"\"\" actions = re . findall ( pattern = patterns . ACTION_PATTERN , string = actions_txt ) parsed_actions = [{ 'player' : player . strip (), 'action' : action_type , 'amount' : self . to_float ( amount )} for player , action_type , amount in actions ] return parsed_actions def extract_actions ( self , hand_txt : str ) -> dict : \"\"\" Extract the actions information from a poker hand history and return as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the actions extracted for each street of the poker hand history(preflop, flop, turn, river). \"\"\" actions_dict = { street : self . parse_actions ( re . search ( pattern , string = hand_txt , flags = re . DOTALL ) . group ( 1 )) if re . search ( pattern , string = hand_txt , flags = re . DOTALL ) else [] for pattern , street in zip ( patterns . STREET_ACTION_PATTERNS , [ 'preflop' , 'flop' , 'turn' , 'river' ])} return actions_dict @staticmethod def extract_showdown ( hand_txt : str ) -> dict : \"\"\" Extract the showdown information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the showdown information extracted from the poker hand history(first_card, second_card). \"\"\" showdown_info = { player . strip (): { \"first_card\" : card1 , \"second_card\" : card2 } for player , card1 , card2 in re . findall ( pattern = patterns . SHOWDOWN_PATTERN , string = hand_txt )} return showdown_info def extract_winners ( self , hand_txt : str ) -> dict : \"\"\" Extract the winners information from a poker hand history and return it as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the winners information extracted from the poker hand history(winner_name(amount, pot_type)). \"\"\" winners_info = { winner : { \"amount\" : self . to_float ( amount ), \"pot_type\" : pot_type } for winner , amount , pot_type in re . findall ( pattern = patterns . WINNERS_PATTERN , string = hand_txt )} return winners_info @staticmethod def extract_hand_id ( hand_txt : str ) -> dict : \"\"\" Extract the hand id information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hand id extracted from the poker hand history(hand_id). \"\"\" hand_id = re . search ( pattern = patterns . HAND_ID_PATTERN , string = hand_txt ) . group ( 1 ) return { \"hand_id\" : hand_id } def parse_hand ( self , hand_txt : str ) -> dict : \"\"\" Extract all information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the information extracted from the poker hand history (hand_id, datetime, game_type, buy_in, blinds, level, max_players, button_seat, table_name, table_ident, players, hero_hand, postings, actions, flop, turn, river, showdown, winners). \"\"\" hand_history_dict = { \"hand_id\" : self . extract_hand_id ( hand_txt )[ \"hand_id\" ], \"datetime\" : self . extract_datetime ( hand_txt )[ \"datetime\" ], \"game_type\" : self . extract_game_type ( hand_txt )[ \"game_type\" ], \"buy_in\" : self . extract_buy_in ( hand_txt ), \"blinds\" : self . extract_blinds ( hand_txt ), \"level\" : self . extract_level ( hand_txt )[ \"level\" ], \"max_players\" : self . extract_max_players ( hand_txt )[ \"max_players\" ], \"button_seat\" : self . extract_button_seat ( hand_txt )[ \"button\" ], \"table_name\" : self . extract_table_name ( hand_txt )[ \"table_name\" ], \"table_ident\" : self . extract_table_ident ( hand_txt )[ \"table_ident\" ], \"players\" : self . extract_players ( hand_txt ), \"hero_hand\" : self . extract_hero_hand ( hand_txt ), \"postings\" : self . extract_posting ( hand_txt ), \"actions\" : self . extract_actions ( hand_txt ), \"flop\" : self . extract_flop ( hand_txt ), \"turn\" : self . extract_turn ( hand_txt ), \"river\" : self . extract_river ( hand_txt ), \"showdown\" : self . extract_showdown ( hand_txt ), \"winners\" : self . extract_winners ( hand_txt ) } return hand_history_dict def parse_to_json ( self , history_path : str , destination_path : str ) -> None : \"\"\" Parse a poker hand history to a JSON format. Parameters: history_path (str): The path to the poker hand history file. destination_path (str): The path to save the JSON file. \"\"\" hand_text = self . get_raw_text ( history_path ) hand_info = self . parse_hand ( hand_text ) with open ( destination_path , \"w\" , encoding = \"utf-8\" ) as file : json . dump ( hand_info , file , indent = 4 )","title":"Examples"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_actions","text":"Extract the actions information from a poker hand history and return as a nested dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing all the actions extracted for each street dict \u2013 of the poker hand history(preflop, flop, turn, river). Source code in pkrhistoryparser/parser.py 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 def extract_actions ( self , hand_txt : str ) -> dict : \"\"\" Extract the actions information from a poker hand history and return as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the actions extracted for each street of the poker hand history(preflop, flop, turn, river). \"\"\" actions_dict = { street : self . parse_actions ( re . search ( pattern , string = hand_txt , flags = re . DOTALL ) . group ( 1 )) if re . search ( pattern , string = hand_txt , flags = re . DOTALL ) else [] for pattern , street in zip ( patterns . STREET_ACTION_PATTERNS , [ 'preflop' , 'flop' , 'turn' , 'river' ])} return actions_dict","title":"extract_actions"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_blinds","text":"Extract the blind levels and ante. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the blind levels and ante extracted from the poker hand history(ante, sb, bb). Source code in pkrhistoryparser/parser.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def extract_blinds ( self , hand_txt : str ) -> dict : \"\"\" Extract the blind levels and ante. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the blind levels and ante extracted from the poker hand history(ante, sb, bb). \"\"\" tour_blinds_match = re . search ( pattern = patterns . TOURNAMENT_BLINDS_PATTERN , string = hand_txt ) other_blinds_match = re . search ( pattern = patterns . OTHER_BLINDS_PATTERN , string = hand_txt ) if tour_blinds_match : ante , sb , bb = tour_blinds_match . group ( 1 ), tour_blinds_match . group ( 2 ), tour_blinds_match . group ( 3 ) elif other_blinds_match : sb , bb = ( other_blinds_match . group ( 1 ) . replace ( \"\u20ac\" , \"\" ), other_blinds_match . group ( 2 ) . replace ( \"\u20ac\" , \"\" )) ante = 0 else : ante , sb , bb = None , None , None return { \"ante\" : self . to_float ( ante ), \"sb\" : self . to_float ( sb ), \"bb\" : self . to_float ( bb )}","title":"extract_blinds"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_button_seat","text":"Extract the button seat information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the button seat extracted from the poker hand history(button). Source code in pkrhistoryparser/parser.py 217 218 219 220 221 222 223 224 225 226 227 228 229 @staticmethod def extract_button_seat ( hand_txt : str ) -> dict : \"\"\" Extract the button seat information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the button seat extracted from the poker hand history(button). \"\"\" button = re . search ( pattern = patterns . BUTTON_SEAT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"button\" : int ( button )}","title":"extract_button_seat"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_buy_in","text":"Extract the buy-in and rake information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dict containing the buy-in and rake extracted dict \u2013 from the poker hand history(prize_pool_contribution, bounty, rake). Source code in pkrhistoryparser/parser.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 def extract_buy_in ( self , hand_txt : str ) -> dict : \"\"\" Extract the buy-in and rake information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the buy-in and rake extracted from the poker hand history(prize_pool_contribution, bounty, rake). \"\"\" ko_buy_in_match = re . search ( pattern = patterns . KO_BUY_IN_PATTERN , string = hand_txt ) buy_in_match = re . search ( pattern = patterns . NORMAL_BUY_IN_PATTERN , string = hand_txt ) free_roll_match = re . search ( pattern = patterns . FREE_ROLL_PATTERN , string = hand_txt ) if ko_buy_in_match : prize_pool_contribution , bounty , rake = ( ko_buy_in_match . group ( 1 ), ko_buy_in_match . group ( 2 ), ko_buy_in_match . group ( 3 )) elif buy_in_match : prize_pool_contribution , rake = buy_in_match . group ( 1 ), buy_in_match . group ( 2 ) bounty = 0 elif free_roll_match : prize_pool_contribution , bounty , rake = 0 , 0 , 0 else : prize_pool_contribution , bounty , rake = None , None , None return { \"prize_pool_contribution\" : self . to_float ( prize_pool_contribution ), \"bounty\" : self . to_float ( bounty ), \"rake\" : self . to_float ( rake )}","title":"extract_buy_in"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_datetime","text":"Extract the datetime information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the datetime extracted from the poker hand history(datetime). Source code in pkrhistoryparser/parser.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @staticmethod def extract_datetime ( hand_txt : str ) -> dict : \"\"\" Extract the datetime information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the datetime extracted from the poker hand history(datetime). \"\"\" datetime_match = re . search ( pattern = patterns . DATETIME_PATTERN , string = hand_txt ) dt = datetime . strptime ( datetime_match . group ( 1 ), \"%Y/%m/ %d %H:%M:%S\" ) dt_str = dt . strftime ( \" %d -%m-%Y %H:%M:%S\" ) return { \"datetime\" : dt_str }","title":"extract_datetime"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_flop","text":"Extract the cards on the Flop from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary representing the cards on the Flop(flop_card_1, flop_card_2, flop_card_3). Source code in pkrhistoryparser/parser.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 @staticmethod def extract_flop ( hand_txt : str ) -> dict : \"\"\" Extract the cards on the Flop from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the cards on the Flop(flop_card_1, flop_card_2, flop_card_3). \"\"\" flop_match = re . search ( pattern = patterns . FLOP_PATTERN , string = hand_txt , flags = re . UNICODE ) card1 , card2 , card3 = flop_match . groups () if flop_match else ( None , None , None ) return { \"flop_card_1\" : card1 , \"flop_card_2\" : card2 , \"flop_card_3\" : card3 }","title":"extract_flop"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_game_type","text":"Extract the type of the game (Tournament or CashGame). Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the game type extracted from the poker hand history(game_type). Source code in pkrhistoryparser/parser.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @staticmethod def extract_game_type ( hand_txt : str ) -> dict : \"\"\" Extract the type of the game (Tournament or CashGame). Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the game type extracted from the poker hand history(game_type). \"\"\" game_types = { \"Tournament\" : \"Tournament\" , \"CashGame\" : \"CashGame\" } game_type = next (( game_types [ key ] for key in game_types if key in hand_txt ), \"Unknown\" ) return { \"game_type\" : game_type }","title":"extract_game_type"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_hand_id","text":"Extract the hand id information from a poker hand history. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the hand id extracted from the poker hand history(hand_id). Source code in pkrhistoryparser/parser.py 382 383 384 385 386 387 388 389 390 391 392 393 394 @staticmethod def extract_hand_id ( hand_txt : str ) -> dict : \"\"\" Extract the hand id information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hand id extracted from the poker hand history(hand_id). \"\"\" hand_id = re . search ( pattern = patterns . HAND_ID_PATTERN , string = hand_txt ) . group ( 1 ) return { \"hand_id\" : hand_id }","title":"extract_hand_id"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_hero_hand","text":"Extract the hero's hand (hole cards) from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the hero's hand extracted from the poker hand history(hero, first_card, second_card). Source code in pkrhistoryparser/parser.py 259 260 261 262 263 264 265 266 267 268 269 270 271 @staticmethod def extract_hero_hand ( hand_txt : str ) -> dict : \"\"\" Extract the hero's hand (hole cards) from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the hero's hand extracted from the poker hand history(hero, first_card, second_card). \"\"\" hero , card1 , card2 = re . search ( pattern = patterns . HERO_HAND_PATTERN , string = hand_txt , flags = re . UNICODE ) . groups () return { \"hero\" : hero , \"first_card\" : card1 , \"second_card\" : card2 }","title":"extract_hero_hand"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_level","text":"Extract the level information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the level extracted from the poker hand history(level). Source code in pkrhistoryparser/parser.py 189 190 191 192 193 194 195 196 197 198 199 200 201 @staticmethod def extract_level ( hand_txt : str ) -> dict : \"\"\" Extract the level information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the level extracted from the poker hand history(level). \"\"\" level_match = re . search ( pattern = patterns . LEVEL_PATTERN , string = hand_txt ) return { \"level\" : int ( level_match . group ( 1 )) if level_match else 0 }","title":"extract_level"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_max_players","text":"Extract the max players at the table. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the max players extracted from the poker hand history(max_players). Source code in pkrhistoryparser/parser.py 203 204 205 206 207 208 209 210 211 212 213 214 215 @staticmethod def extract_max_players ( hand_txt : str ) -> dict : \"\"\" Extract the max players at the table. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the max players extracted from the poker hand history(max_players). \"\"\" max_players = re . search ( pattern = patterns . MAX_PLAYERS_PATTERN , string = hand_txt ) . group ( 1 ) return { \"max_players\" : int ( max_players )}","title":"extract_max_players"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_players","text":"Extract player information from a raw poker hand history and return as a dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand history as a string. Returns: dict ( dict ) \u2013 A dictionary containing player information(seat, pseudo, stack, bounty). Source code in pkrhistoryparser/parser.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def extract_players ( self , hand_txt : str ) -> dict : \"\"\" Extract player information from a raw poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: dict: A dictionary containing player information(seat, pseudo, stack, bounty). \"\"\" matches = re . findall ( pattern = patterns . PLAYER_PATTERN , string = hand_txt ) players_info = { int ( seat ): { \"seat\" : int ( seat ), \"pseudo\" : pseudo , \"stack\" : self . to_float ( stack ), \"bounty\" : self . to_float ( bounty ) if bounty else None } for seat , pseudo , stack , bounty in matches } return players_info","title":"extract_players"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_posting","text":"Extract blinds and antes posted information from a poker hand history and return as a dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand history as a string. Returns: list ( list ) \u2013 A list of dictionaries containing blinds and antes information(pseudo, amount, blind_type). Source code in pkrhistoryparser/parser.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def extract_posting ( self , hand_txt : str ) -> list : \"\"\" Extract blinds and antes posted information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand history as a string. Returns: list: A list of dictionaries containing blinds and antes information(pseudo, amount, blind_type). \"\"\" matches = re . findall ( pattern = patterns . BLINDS_PATTERN , string = hand_txt ) blinds_antes_info = [{ \"pseudo\" : pseudo . strip (), \"amount\" : self . to_float ( amount ), \"blind_type\" : blind_type } for pseudo , blind_type , amount in matches ] return blinds_antes_info","title":"extract_posting"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_river","text":"Extract the card on the River from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary representing the card on the River(river_card). Source code in pkrhistoryparser/parser.py 303 304 305 306 307 308 309 310 311 312 313 314 315 316 @staticmethod def extract_river ( hand_txt : str ) -> dict : \"\"\" Extract the card on the River from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the River(river_card). \"\"\" river_match = re . search ( pattern = patterns . RIVER_PATTERN , string = hand_txt , flags = re . UNICODE ) card = river_match . group ( 1 ) if river_match else None return { \"river_card\" : card }","title":"extract_river"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_showdown","text":"Extract the showdown information from a poker hand history. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dict containing the showdown information extracted dict \u2013 from the poker hand history(first_card, second_card). Source code in pkrhistoryparser/parser.py 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 @staticmethod def extract_showdown ( hand_txt : str ) -> dict : \"\"\" Extract the showdown information from a poker hand history. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dict containing the showdown information extracted from the poker hand history(first_card, second_card). \"\"\" showdown_info = { player . strip (): { \"first_card\" : card1 , \"second_card\" : card2 } for player , card1 , card2 in re . findall ( pattern = patterns . SHOWDOWN_PATTERN , string = hand_txt )} return showdown_info","title":"extract_showdown"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_table_ident","text":"Extract the table ident information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the table ident extracted from the poker hand history(table_ident). Source code in pkrhistoryparser/parser.py 245 246 247 248 249 250 251 252 253 254 255 256 257 @staticmethod def extract_table_ident ( hand_txt : str ) -> dict : \"\"\" Extract the table ident information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table ident extracted from the poker hand history(table_ident). \"\"\" table_ident = re . search ( pattern = patterns . TABLE_IDENT_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_ident\" : table_ident }","title":"extract_table_ident"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_table_name","text":"Extract the table name information. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the table name extracted from the poker hand history(table_name). Source code in pkrhistoryparser/parser.py 231 232 233 234 235 236 237 238 239 240 241 242 243 @staticmethod def extract_table_name ( hand_txt : str ) -> dict : \"\"\" Extract the table name information. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the table name extracted from the poker hand history(table_name). \"\"\" table_name = re . search ( pattern = patterns . TABLE_NAME_PATTERN , string = hand_txt ) . group ( 1 ) return { \"table_name\" : table_name }","title":"extract_table_name"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_turn","text":"Extract the card on the Turn from a single poker hand text and return as a string. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary representing the card on the Turn(turn_card). Source code in pkrhistoryparser/parser.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 @staticmethod def extract_turn ( hand_txt : str ) -> dict : \"\"\" Extract the card on the Turn from a single poker hand text and return as a string. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary representing the card on the Turn(turn_card). \"\"\" turn_match = re . search ( pattern = patterns . TURN_PATTERN , string = hand_txt , flags = re . UNICODE ) card = turn_match . group ( 1 ) if turn_match else None return { \"turn_card\" : card }","title":"extract_turn"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.extract_winners","text":"Extract the winners information from a poker hand history and return it as a nested dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing the winners information extracted dict \u2013 from the poker hand history(winner_name(amount, pot_type)). Source code in pkrhistoryparser/parser.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 def extract_winners ( self , hand_txt : str ) -> dict : \"\"\" Extract the winners information from a poker hand history and return it as a nested dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing the winners information extracted from the poker hand history(winner_name(amount, pot_type)). \"\"\" winners_info = { winner : { \"amount\" : self . to_float ( amount ), \"pot_type\" : pot_type } for winner , amount , pot_type in re . findall ( pattern = patterns . WINNERS_PATTERN , string = hand_txt )} return winners_info","title":"extract_winners"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.get_raw_text","text":"Get the raw text from a history file Parameters: history_path ( str ) \u2013 The path to the history file. Returns: str ( str ) \u2013 The text of the hand history file. Source code in pkrhistoryparser/parser.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 @staticmethod def get_raw_text ( history_path ) -> str : \"\"\" Get the raw text from a history file Parameters: history_path (str): The path to the history file. Returns: str: The text of the hand history file. \"\"\" with open ( history_path , \"r\" , encoding = \"utf-8\" ) as file : hand_text = file . read () return hand_text","title":"get_raw_text"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.parse_actions","text":"Parse the actions text from a poker hand history for a specific street and return a list of dictionaries containing the actions. Parameters: actions_txt ( str ) \u2013 The raw actions text for a specific street. Returns: list ( list ) \u2013 A list of dictionaries(player, action, amount), each representing an action. Source code in pkrhistoryparser/parser.py 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 def parse_actions ( self , actions_txt : str ) -> list : \"\"\" Parse the actions text from a poker hand history for a specific street and return a list of dictionaries containing the actions. Parameters: actions_txt (str): The raw actions text for a specific street. Returns: list: A list of dictionaries(player, action, amount), each representing an action. \"\"\" actions = re . findall ( pattern = patterns . ACTION_PATTERN , string = actions_txt ) parsed_actions = [{ 'player' : player . strip (), 'action' : action_type , 'amount' : self . to_float ( amount )} for player , action_type , amount in actions ] return parsed_actions","title":"parse_actions"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.parse_hand","text":"Extract all information from a poker hand history and return as a dictionary. Parameters: hand_txt ( str ) \u2013 The raw poker hand text as a string. Returns: dict ( dict ) \u2013 A dictionary containing all the information extracted from the poker hand history (hand_id, datetime, game_type, buy_in, blinds, level, max_players, button_seat, table_name, table_ident, players, hero_hand, postings, actions, flop, turn, river, showdown, winners). Source code in pkrhistoryparser/parser.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def parse_hand ( self , hand_txt : str ) -> dict : \"\"\" Extract all information from a poker hand history and return as a dictionary. Parameters: hand_txt (str): The raw poker hand text as a string. Returns: dict: A dictionary containing all the information extracted from the poker hand history (hand_id, datetime, game_type, buy_in, blinds, level, max_players, button_seat, table_name, table_ident, players, hero_hand, postings, actions, flop, turn, river, showdown, winners). \"\"\" hand_history_dict = { \"hand_id\" : self . extract_hand_id ( hand_txt )[ \"hand_id\" ], \"datetime\" : self . extract_datetime ( hand_txt )[ \"datetime\" ], \"game_type\" : self . extract_game_type ( hand_txt )[ \"game_type\" ], \"buy_in\" : self . extract_buy_in ( hand_txt ), \"blinds\" : self . extract_blinds ( hand_txt ), \"level\" : self . extract_level ( hand_txt )[ \"level\" ], \"max_players\" : self . extract_max_players ( hand_txt )[ \"max_players\" ], \"button_seat\" : self . extract_button_seat ( hand_txt )[ \"button\" ], \"table_name\" : self . extract_table_name ( hand_txt )[ \"table_name\" ], \"table_ident\" : self . extract_table_ident ( hand_txt )[ \"table_ident\" ], \"players\" : self . extract_players ( hand_txt ), \"hero_hand\" : self . extract_hero_hand ( hand_txt ), \"postings\" : self . extract_posting ( hand_txt ), \"actions\" : self . extract_actions ( hand_txt ), \"flop\" : self . extract_flop ( hand_txt ), \"turn\" : self . extract_turn ( hand_txt ), \"river\" : self . extract_river ( hand_txt ), \"showdown\" : self . extract_showdown ( hand_txt ), \"winners\" : self . extract_winners ( hand_txt ) } return hand_history_dict","title":"parse_hand"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.parse_to_json","text":"Parse a poker hand history to a JSON format. Parameters: history_path ( str ) \u2013 The path to the poker hand history file. destination_path ( str ) \u2013 The path to save the JSON file. Source code in pkrhistoryparser/parser.py 431 432 433 434 435 436 437 438 439 440 441 442 def parse_to_json ( self , history_path : str , destination_path : str ) -> None : \"\"\" Parse a poker hand history to a JSON format. Parameters: history_path (str): The path to the poker hand history file. destination_path (str): The path to save the JSON file. \"\"\" hand_text = self . get_raw_text ( history_path ) hand_info = self . parse_hand ( hand_text ) with open ( destination_path , \"w\" , encoding = \"utf-8\" ) as file : json . dump ( hand_info , file , indent = 4 )","title":"parse_to_json"},{"location":"parser/#pkrhistoryparser.parser.HandHistoryParser.to_float","text":"Transforms any written str number into a float Parameters: txt_num(str) \u2013 The number to transform Returns: float ( float ) \u2013 The float number Source code in pkrhistoryparser/parser.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 @staticmethod def to_float ( txt_num : str ) -> float : \"\"\" Transforms any written str number into a float Parameters: txt_num(str): The number to transform Returns: float: The float number \"\"\" try : return float ( txt_num . replace ( \",\" , \".\" )) except ( TypeError , AttributeError , ValueError ): return 0.0","title":"to_float"},{"location":"patterns/winamax/","text":"winamax Overview This module is part of the pkrhistoryparser package. API Documentation This module contains regular expressions used to parse Winamax hand histories.","title":"Winamax"},{"location":"patterns/winamax/#winamax","text":"","title":"winamax"},{"location":"patterns/winamax/#overview","text":"This module is part of the pkrhistoryparser package.","title":"Overview"},{"location":"patterns/winamax/#api-documentation","text":"This module contains regular expressions used to parse Winamax hand histories.","title":"API Documentation"}]}